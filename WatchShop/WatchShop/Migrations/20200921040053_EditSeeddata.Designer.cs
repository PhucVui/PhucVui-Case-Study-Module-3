// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchShop.Models;

namespace WatchShop.Migrations
{
    [DbContext(typeof(WatchShopDbContext))]
    [Migration("20200921040053_EditSeeddata")]
    partial class EditSeeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WatchShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Logo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .HasDefaultValue("default.jpg");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Casio việt Nam",
                            Logo = "Casio.png",
                            Name = "Casio"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Bulova Ý",
                            Logo = "Bulova.png",
                            Name = "Bulova"
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "GSock 2020",
                            Logo = "GShock.png",
                            Name = "GShock"
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Orient 2019",
                            Logo = "Orient.png",
                            Name = "Orient"
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Seiko 456",
                            Logo = "Seiko.png",
                            Name = "Seiko"
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Sunrise 104",
                            Logo = "sunrise.png",
                            Name = "Sunrise"
                        });
                });

            modelBuilder.Entity("WatchShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WatchShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("WatchShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvataPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("default.jpg");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AvataPath = "casio.jpg",
                            CategoryId = 2,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Casio 0012",
                            Price = 4000000.0
                        },
                        new
                        {
                            Id = 3,
                            AvataPath = "Urgot.jpg",
                            CategoryId = 3,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Bulova Nữ",
                            Price = 10000000.0
                        },
                        new
                        {
                            Id = 4,
                            AvataPath = "A.jpg",
                            CategoryId = 4,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "GShock 01",
                            Price = 30000000.0
                        },
                        new
                        {
                            Id = 5,
                            AvataPath = "images2.jpg",
                            CategoryId = 5,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Orient 0012",
                            Price = 4000000.0
                        },
                        new
                        {
                            Id = 6,
                            AvataPath = "images1.jpg",
                            CategoryId = 6,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Seiko Nữ",
                            Price = 10000000.0
                        },
                        new
                        {
                            Id = 7,
                            AvataPath = "images5.jpg",
                            CategoryId = 7,
                            CreateAt = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Sunrise Nữ",
                            Price = 10000000.0
                        });
                });

            modelBuilder.Entity("WatchShop.Models.OrderDetail", b =>
                {
                    b.HasOne("WatchShop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchShop.Models.Product", b =>
                {
                    b.HasOne("WatchShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
